name: Read Cache Merged Branch

on:
  workflow_call:
    inputs:
      branches:
        description: 'To Merge Branches'
        required: false
        type: string
      rm_old_branch:
        description: 'Will remove old merged tmp branch, if empty dont remove it'
        required: false
        type: string

jobs:
  multiple-branches:
    env:
      BRANCH_JSON: './multiple_branch.json'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Git user information
        run: |
          git config --global user.email "auto_branch@magicloud.io"
          git config --global user.name "auto_branch"

      - name: Branch infos
        run: |
          echo "branches=${{ inputs.branches }}"

      - name: Git checkout multiple-branch-info
        run: |
          git fetch origin
          git checkout -b multiple-branch-info origin/multiple-branch-info
          branches="${{ inputs.branches }}" 
          echo "branches=$branches" >> $GITHUB_ENV
          if [ "${{ inputs.branches }}" == "" ]; then
            branch_name=''
            jq --arg currnent "$branch_name" '.current_branch = $currnent' ${{ env.BRANCH_JSON }} > temp.json
            time=$(date +%Y-%m-%d\ %H:%M:%S)
            jq --arg time "$time" '.time = $time'  temp.json  > temp1.json && mv temp1.json ${{ env.BRANCH_JSON }}
            git commit -a -m "Tmp current multiple branch set empty"
            git push
          fi

      - name: Branches sort name key
        if: inputs.branches != ''
        id: branches-sort
        run: |
          branches="${{ inputs.branches }}"
          IFS=' ' read -r -a branch_array <<< "$branches"
          declare -A unique_branches
          for branch in "${branch_array[@]}"; do
            echo "ub=$branch"
            sanitized_branch="${branch//\//_}"
            echo "sb=$branch"
            unique_branches["$sanitized_branch"]=1
          done
          unique_branch_array=()
          for branch in "${!unique_branches[@]}"; do
            echo "ub=$branch"
            unique_branch_array+=("$branch")
          done
          sorted_branches=($(printf "%s\n" "${unique_branch_array[@]}" | sort))
          echo "111sorted_branches=$sorted_branches"
          asc_branch_key=$(IFS=_; echo "${sorted_branches[*]}")
          echo "asc_branch_key=${asc_branch_key}" >> $GITHUB_ENV
          echo "asc_branch_key=${asc_branch_key}"

      - name: Read Cache Branch
        if: inputs.branches != ''
        run: |
          echo "Reading branch info from JSON file..."
          branch_info=$(jq -r '."${{ env.asc_branch_key }}"' ${{ env.BRANCH_JSON }})
          echo "Raw branch_info: $branch_info"
          if [ "$branch_info" = "null" ]; then
            echo 'not find branch_info,generate=needbranch'
            echo "generate=needbranch" >> $GITHUB_ENV
          else
            branch_name=$(echo "$branch_info" | jq -r '.branch_name')
            echo "branch_name=${branch_name}" >> $GITHUB_ENV
            echo "find branch_name=$branch_name"
            echo "Checking for branch: $branch_name == ${branch_name}"
            had_branch=$(git branch -r)
            echo "had_branch=$had_branch"
            if [[ "$had_branch" == *"$branch_name"* ]]; then
              if [[ '${{inputs.rm_old_branch}}' == '' ||  '${{inputs.rm_old_branch}}' == 'no']]; then
                jq --arg currnent "$branch_name" '.current_branch = $currnent' ${{ env.BRANCH_JSON }} > temp.json
                time=$(date +%Y-%m-%d\ %H:%M:%S)
                jq --arg time "$time" '.time = $time'  temp.json  > temp1.json && mv temp1.json ${{ env.BRANCH_JSON }}
                git commit -a -m "Tmp Branch $branch_name"
                git push
                echo "exist:$branch_name, generate=exist"
                echo "generate=exist" >> $GITHUB_ENV
              else
                git push origin -d $branch_name
                echo "delete old tmp branch $branch_name, generate=needbranch"
                echo "generate=needbranch" >> $GITHUB_ENV
              fi
            else
              echo "generate=needbranch" >> $GITHUB_ENV
              echo "not exist cached:$branch_name, generate=needbranch"
            fi
          fi

      - name: Generate temporary branch name
        if: ${{ env.generate == 'needbranch' }}
        run: |
          timestamp=$(date +%s)
          time=$(date +%Y-%m-%d\ %H:%M:%S)
          branch_name=tmp/tmp_${timestamp}
          asc_branch_name=${{ env.asc_branch_key }}
          echo "${branch_name}"
          BRANCH_INFO="{ \"branch_name\": \"${branch_name}\", \"time\": \"${time}\", \"timestamp\": ${timestamp} }"
          echo "$BRANCH_INFO"
          jq --arg key "$asc_branch_name" --argjson new_info "$BRANCH_INFO" '.[ $key ] = $new_info' ${{ env.BRANCH_JSON }} > temp.json
          jq --arg currnent "$branch_name" '.current_branch = $currnent' temp.json > temp1.json
          mv temp1.json ${{ env.BRANCH_JSON }}
          echo "new_branch_name=tmp/tmp_${timestamp}" >> $GITHUB_ENV
          git commit -a -m "Tmp Branch $branch_name"
          git push

      - name: Create temporary branch
        if: env.new_branch_name != ''
        run: |
          git fetch origin
          git checkout -b ${{ env.new_branch_name }} origin/${GITHUB_REF#refs/heads/}
          git push -u origin ${{ env.new_branch_name }}

     

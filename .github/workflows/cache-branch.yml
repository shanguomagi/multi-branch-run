name: Read Cache Merged Branch

on:
  workflow_call:
    inputs:
      branches:
        description: 'To Merge Branches'
        required: false
        type: string

jobs:
  multiple-branches:
    outputs:
      final_branch_name: "aaa ${{ steps.final-branch-name.outputs.final_branch_name }}"
      output_message: "out ${{ steps.msg.outputs.output_message }}"
    env:
      BRANCH_JSON: './multiple_branch.json'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set output message
        id: msg
        run: echo "output_message=${{ inputs.branches }} from Job A" >> $GITHUB_OUTPUT

      - name: Set Git user information
        if: inputs.branches != ''
        run: |
          git config --global user.email "auto_branch@magicloud.io"
          git config --global user.name "auto_branch"

      - name: Git checkout multiple-branch-info
        run: |
          git checkout -b multiple-branch-info origin/multiple-branch-info
          git branch
          if [ "${{ inputs.branches }}" == "" ]; then
            $branch_name=''
            jq --arg currnent "$branch_name" '.current_branch = $currnent' ${{ env.BRANCH_JSON }} > temp.json && mv temp.json ${{ env.BRANCH_JSON }}
            git commit -a -m "Tmp Branch $branch_name"
            git push
          fi

      - name: Read data from file
        if: inputs.branches != ''
        run: |
          if [ -f "${{ env.BRANCH_JSON }}" ]; then
            echo "multiple_branch.json existã€‚"
            data=$(cat ${{ env.BRANCH_JSON }})
            echo "Previous multiple_branch_data: $data"
          else
            echo "multiple_branch.json not exist, please check it"
          fi

      - name: Branches sort name key
        if: inputs.branches != ''
        id: branches-sort
        run: |
          branches="${{ inputs.branches }}"
          IFS=' ' read -r -a branch_array <<< "$branches"
          declare -A unique_branches
          for branch in "${branch_array[@]}"; do
            unique_branches["$branch"]=1
          done
          unique_branch_array=()
          for branch in "${!unique_branches[@]}"; do
            unique_branch_array+=("$branch")
          done

          sorted_branches=($(printf "%s\n" "${unique_branch_array[@]}" | sort))

          asc_branch_name=$(IFS=_; echo "${sorted_branches[*]}")
          echo "asc_branch_name=${asc_branch_name}" >> $GITHUB_OUTPUT
          echo "${asc_branch_name}"


      - name: Read Cache Branch
        if: inputs.branches != ''
        id: read-cache
        run: |
          branch_info=$(jq -r '.${{ steps.branches-sort.outputs.asc_branch_name }}' ${{ env.BRANCH_JSON }})
          if [ -n "$branch_info" ]; then
            branch_name=$(echo "$branch_info" | jq -r '.branch_name')
            echo "branch_name=${branch_name}" >> $GITHUB_OUTPUT
            echo "find branch_info $branch_info $branch_name"
            jq --arg key "$asc_branch_name" --argjson new_info "$BRANCH_INFO" '.[ $key ] = $new_info' ${{ env.BRANCH_JSON }} > temp.json && mv temp.json ${{ env.BRANCH_JSON }}
            git commit -a -m "Tmp Branch $branch_name"
            git push
          else
            echo "branch_name=''" >> $GITHUB_OUTPUT
            echo 'not find branch_info'
          fi
          echo "$branch_name"

      - name: Generate temporary branch name
        id: generate-branch-name
        if: steps.read-cache.outputs.branch_name == '' && inputs.branches != ''
        run: |
          timestamp=$(date +%s)
          time=$(date +%Y-%m-%d\ %H:%M:%S)
          branch_name=tmp/tmp_${timestamp}
          asc_branch_name=${{ steps.branches-sort.outputs.asc_branch_name }}
          echo "${branch_name}"
          BRANCH_INFO="{ \"branch_name\": \"${branch_name}\", \"time\": \"${time}\", \"timestamp\": ${timestamp} }"
          echo "$BRANCH_INFO"
          jq --arg key "$asc_branch_name" --argjson new_info "$BRANCH_INFO" '.[ $key ] = $new_info' ${{ env.BRANCH_JSON }} > temp.json
          jq --arg currnent "$asc_branch_name" '.current_branch = $currnent' temp.json > temp1.json
          mv temp1.json ${{ env.BRANCH_JSON }}
          echo "new_branch_name=tmp/tmp_${timestamp}" >> "$GITHUB_OUTPUT"
          git commit -a -m "Tmp Branch $branch_name"
          git push

      - name: Create temporary branch
        if: steps.generate-branch-name.outputs.new_branch_name != '' && inputs.branches != ''
        run: |
          git checkout -b ${{ steps.generate-branch-name.outputs.new_branch_name }} origin/${GITHUB_REF#refs/heads/}
          git push -u origin ${{ steps.generate-branch-name.outputs.new_branch_name }}

      - name: Find branch name
        if: inputs.branches != ''
        id: find-branch-name
        run: |
          if [ ${{ steps.read-cache.outputs.branch_name }} == '' ]; then
            echo "new branchname = ${{ steps.generate-branch-name.outputs.new_branch_name }}"
            echo "final_branch_name=${{ steps.generate-branch-name.outputs.new_branch_name }}" >> "$GITHUB_ENV"
          else
            echo "old branch name = ${{ steps.read-cache.outputs.branch_name }}"
            echo "final_branch_name=${{ steps.read-cache.outputs.branch_name }}" >> "$GITHUB_ENV"
          fi
      - name: Final branch name
        id: final-branch-name
        run: |
          if [ "${{ inputs.branches }}" == '' ]; then
            echo "not need merge"
            echo "final_branch_name=" >> "$GITHUB_OUTPUT"
            echo "${{ env.final_branch_name }}" > branch_info.txt
            echo "txt=$(cat branch_info.txt)"
          else
            echo "branch name: ${{ env.final_branch_name }}"
            echo "final_branch_name=${{ env.final_branch_name }}" >> "$GITHUB_OUTPUT"
            echo "${{ env.final_branch_name }}" > branch_info.txt
            echo "txt=$(cat branch_info.txt)"
          fi

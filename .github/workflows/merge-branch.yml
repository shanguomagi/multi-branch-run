name: Merge Branches

on:
  workflow_call:
    inputs:
      branches:
        description: 'To Merge Branches'
        required: false
        type: string

jobs:
  merge-branches:
    runs-on: ubuntu-latest
    env:
      BRANCH_JSON: './multiple_branch.json'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Git user information
        run: |
          git config --global user.email "auto_branch@magicloud.io"
          git config --global user.name "auto_branch"

      - name: Git checkout multiple-branch-info
        if: inputs.branches != ''
        run: |
          git fetch origin
          git checkout -b multiple-branch-info origin/multiple-branch-info
          branch=$(jq -r '.current_branch' ${{ env.BRANCH_JSON }})
          echo "TMP_BRANCH=$branch" >> $GITHUB_ENV
          echo "read TMP_BRANCH=$branch"

      - name: Checkout temporary branch
        if: inputs.branches != ''
        run: |
          git fetch origin
          git checkout -b ${{ env.TMP_BRANCH }} origin/${{ env.TMP_BRANCH }}

      - name: Merge selected branches
        if: inputs.branches != ''
        id: merge
        continue-on-error: true
        run: |
          branches="${{ inputs.branches }}"
          branches="main $branches"
          git fetch origin; git branch
          git_hash=$(git rev-parse --short HEAD)
          for branch in $branches; do
            COMMIT_HASH=$(git rev-parse --short origin/$branch)
            echo "merging: ${{env.TMP_BRANCH}}($git_hash) merge $branch($COMMIT_HASH)"
            MERGE_ERROR=$(git merge --allow-unrelated-histories --no-ff origin/$branch -m "auto" 2>&1)
            EXIT_CODE=$?
            echo "err=$MERGE_ERROR and code=$EXIT_CODE"
            if [ $EXIT_CODE -ne 0 ]; then
              COMMIT_HASH=$(git rev-parse origin/$branch)
              echo "Error: Merge conflict detected when merging branch=origin/$branch hash=$COMMIT_HASH"
              echo "CONFLICT_BRANCH_HASH=$COMMIT_HASH" >> $GITHUB_ENV
              exit 1
            fi
          done

      - name: Push temporary branch
        if: inputs.branches != ''
        run: |
          echo "err=${{steps.merge.outputs.stderr}}"
          echo "erp=${{steps.merge.outputs.stdout}}"
          git push -u origin ${{ env.TMP_BRANCH }}

      - name: Check for merge conflicts
        if: steps.merge.outcome == 'failure' && inputs.branches != ''
        run: |
          echo "Merge conflicts have occurred. Please manually resolve the conflicts and try again with the follow steps:"
          echo "steps.merge.outcome=${{steps.merge.outcome}}"
          echo "git fetch origin; git checkout -b ${{ env.TMP_BRANCH }} origin/${{ env.TMP_BRANCH }}"
          echo "git merge --no-ff ${{env.CONFLICT_BRANCH_HASH}}"
          echo "You should resolve conflicts and commit then push it."
          echo "git push origin ${{ env.TMP_BRANCH }}"
          exit 1

name: run

on:
  workflow_dispatch:
    inputs:
      branches:
        description: 'Branches to merge (separated by space)'
        required: true
        type: string
      environment:
        description: 'Environment (e.g., dev, staging, prod)'
        required: true
        type: string

jobs:
  create-tmp-branches:
    outputs:
      TMP_BRANCH_NAME: ${{ steps.generate-branch-name.outputs.branch_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate temporary branch name
        id: generate-branch-name
        run: |
          timestamp=$(date +%s)
          echo "::set-output name=branch_name::tmp_time${timestamp}"

      - name: Create temporary branch
        run: |
          git checkout -b ${{ steps.generate-branch-name.outputs.branch_name }}
          git push -u origin ${{ steps.generate-branch-name.outputs.branch_name }}

  merge-branches:
    needs: [ create-tmp-branches ]
    env:
      TMP_BRANCH_NAME: ${{ needs.create-tmp-branches.outputs.TMP_BRANCH_NAME }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Git user information
        run: |
          git config --global user.email "shanguo@magicloud.io"
          git config --global user.name "shanguo"

      - name: Checkout temporary branch
        run: |
          git fetch origin
          git checkout -b ${{ env.TMP_BRANCH_NAME }} origin/${{ env.TMP_BRANCH_NAME }}

      - name: Merge selected branches
        id: merge
        continue-on-error: true
        run: |
          git branch
          branches="${{ github.event.inputs.branches }}"
          for branch in $branches; do
            if ! git merge --no-ff origin/$branch; then
              echo "Merge conflict detected when merging branch origin/$branch "
              echo "git fetch origin; git checkout -b ${{ env.TMP_BRANCH_NAME }} origin/${{ env.TMP_BRANCH_NAME }}"
              COMMIT_HASH=$(git rev-parse origin/$branch)
              echo "git merge --no-ff $COMMIT_HASH"
              echo "You should resolve conflicts and commit and push with below step:"
              echo "git push origin ${{ env.TMP_BRANCH_NAME }}"
              exit 1
            fi
          done

      - name: Check status
        run: git status
        
      - name: Push temporary branch
        run: |
          git push -u origin ${{ env.TMP_BRANCH_NAME }}

      - name: Check for merge conflicts
        if: steps.merge.outcome == 'failure'
        run: |
          echo "Merge conflicts have occurred. Please manually resolve the conflicts and try again."
          exit 1


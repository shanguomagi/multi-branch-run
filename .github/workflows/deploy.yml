name: run

on:
  workflow_dispatch:
    inputs:
      branches:
        description: 'Branches to merge (separated by space)'
        required: true
        type: string
        default: "bbb aaa ccc"
      environment:
        description: 'Environment (e.g., dev, staging, prod)'
        required: true
        type: string
        default: dev

jobs:
  create-tmp-branches:
    outputs:
      TMP_BRANCH_NAME: ${{ steps.generate-branch-name.outputs.branch_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

#      - name: Generate data
#        id: generate
#        run: |
#          data='{ "branch_name": "test" }'
#          echo "Generated data: $data"
#          echo "$data" > bdata.txt
#
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: bdata
#          path: bdata.txt

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: bdata
      - name: Display structure of downloaded files
        run: ls -R

#      - name: Read data from file
#        run: |
#          if [ -f "multiple_branch.json" ]; then
#            echo "multiple_branch.json 文件存在。"
#            data=$(cat multiple_branch.json)
#            echo "Previous multiple_branch_data: $data"
#          else
#            echo "multiple_branch.json 文件不存在，请检查。"
#          fi
#
#

      - name: Branches sort name key
        id: branches-sort
        run: |
          branches="${{ github.event.inputs.branches }}"
          IFS=' ' read -r -a branch_array <<< "$branches"
          sorted_branches=($(printf "%s\n" "${branch_array[@]}" | sort))
          asc_branch_name=$(IFS=_; echo "${sorted_branches[*]}")
          echo "asc_branch_name=${asc_branch_name}" >> $GITHUB_OUTPUT
          echo "${asc_branch_name}"

      - name: Debug output
        run: |
          echo "当前工作目录: $(pwd)"
          echo "文件列表:"
          ls -l

#      - name: Process multiple_branch.json
#        run: |
#          if [ -f "multiple_branch.json" ]; then
#            jq '.some_key' multiple_branch.json
#          else
#            echo "multiple_branch.json 文件不存在，请检查。"
#          fi

#      - name: Read Cache Branch
#        id: read-cache
#        run: |
#          branch_info=$(jq -r '.${{ steps.branches-sort.outputs.asc_branch_name }}' multiple_branch.json)
#          if [ -n "$branch_info" ]; then
#            branch_name=$(echo "$branch_info" | jq -r '.branch_name')
#            echo "branch_name=tmp/tmp_${timestamp}" >> "$GITHUB_OUTPUT"
#          else
#            echo "branch_name=" >> $GITHUB_OUTPUT
#          fi
#
#      - name: Generate temporary branch name
#        id: generate-branch-name
#        if: steps.read-cache.outputs. branch_name == ''
#        run: |
#          timestamp=$(date +%s)
#          time=$(date +%Y-%m-%d\ %H:%M:%S)
#          branch_name=tmp/tmp_${timestamp}
#          git checkout -b $branch_name
#          git push -u origin $branch_name
#          echo "branch_name=tmp/tmp_${timestamp}" >> "$GITHUB_OUTPUT"
#          BRANCH_INFO='{ "branch_name": $branch_name, "time": $time, "timestamp": $timestamp }'
#          jq --argjson new_branch_info "$BRANCH_INFO" '.$asc_branch_name = $new_branch_info' multiple_branch.json > temp.json && mv temp.json multiple_branch.json


      - name: Create temporary branch
        if: steps.read-cache.outputs. branch_name == ''
        run: |
          git checkout -b ${{ steps.generate-branch-name.outputs.branch_name }}
          git push -u origin ${{ steps.generate-branch-name.outputs.branch_name }}

  merge-branches:
    needs: [ create-tmp-branches ]
    env:
      TMP_BRANCH_NAME: ${{ needs.create-tmp-branches.outputs.TMP_BRANCH_NAME }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Git user information
        run: |
          git config --global user.email "shanguo@magicloud.io"
          git config --global user.name "shanguo"

      - name: Checkout temporary branch
        run: |
          git fetch origin
          git checkout -b ${{ env.TMP_BRANCH_NAME }} origin/${{ env.TMP_BRANCH_NAME }}

      - name: Merge selected branches
        id: merge
        continue-on-error: true
        run: |
          git branch
          branches="${{ github.event.inputs.branches }}"
          for branch in $branches; do
            if ! git merge --no-ff origin/$branch; then
              echo "Merge conflict detected when merging branch origin/$branch "
              COMMIT_HASH=$(git rev-parse origin/$branch)
              echo "CONFLICT_BRANCH_HASH=$COMMIT_HASH" >> $GITHUB_ENV
              exit 1
            fi
          done

      - name: Check status
        run: git status
        
      - name: Push temporary branch
        run: |
          git push -u origin ${{ env.TMP_BRANCH_NAME }}

      - name: Check for merge conflicts
        if: steps.merge.outcome == 'failure'
        run: |
          echo "Merge conflicts have occurred. Please manually resolve the conflicts and try again with the follow steps:"
          echo "git fetch origin; git checkout -b ${{ env.TMP_BRANCH_NAME }} origin/${{ env.TMP_BRANCH_NAME }}"
          echo "git merge --no-ff ${{env.CONFLICT_BRANCH_HASH}}"
          echo "You should resolve conflicts and commit then push it."
          echo "git push origin ${{ env.TMP_BRANCH_NAME }}"           
          exit 1


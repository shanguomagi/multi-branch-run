name: run

on:
  workflow_dispatch:
    inputs:
      branches:
        description: 'Branches to merge (separated by space)'
        required: false
        type: string
        default: ""
      environment:
        description: 'Environment (e.g., dev, staging, prod)'
        required: true
        type: string
        default: dev


jobs:
  multiple_branches:
    uses: ./.github/workflows/cache-branch.yml
    with:
      branches: ${{ github.event.inputs.branches  }}
  merge_branches:
    needs: multiple_branches
    uses: ./.github/workflows/merge-branch.yml
    with:
      branches: ${{ github.event.inputs.branches  }}
#    outputs:
#      TMP_BRANCH_NAME: ${{ jobs.multiple-branches.outputs.TMP_BRANCH_NAME }}

#    env:
#      BRANCH_JSON: './multiple_branch.json'
#      ENV: ${{ github.event.inputs.environment }}
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#
#      - name: Set Git user information
#        if: github.event.inputs.branches != ''
#        run: |
#          git config --global user.email "auto_branch@magicloud.io"
#          git config --global user.name "auto_branch"
#
#      - name: Git checkout multiple-branch-info
#        if: github.event.inputs.branches != ''
#        run: |
#          git checkout -b multiple-branch-info origin/multiple-branch-info
#          git branch
#
#      - name: Read data from file
#        if: github.event.inputs.branches != ''
#        run: |
#          if [ -f "${{ env.BRANCH_JSON }}" ]; then
#            echo "multiple_branch.json existã€‚"
#            data=$(cat ${{ env.BRANCH_JSON }})
#            echo "Previous multiple_branch_data: $data"
#          else
#            echo "multiple_branch.json not exist, please check it"
#          fi
#
#      - name: Branches sort name key
#        if: github.event.inputs.branches != ''
#        id: branches-sort
#        run: |
#          branches="${{ github.event.inputs.branches }}"
#          IFS=' ' read -r -a branch_array <<< "$branches"
#          declare -A unique_branches
#          for branch in "${branch_array[@]}"; do
#            unique_branches["$branch"]=1
#          done
#          unique_branch_array=()
#          for branch in "${!unique_branches[@]}"; do
#            unique_branch_array+=("$branch")
#          done
#
#          sorted_branches=($(printf "%s\n" "${unique_branch_array[@]}" | sort))
#
#          asc_branch_name=$(IFS=_; echo "${sorted_branches[*]}")
#          echo "asc_branch_name=${asc_branch_name}" >> $GITHUB_ENV
#          echo "${asc_branch_name}"
#
#
#      - name: Read Cache Branch
#        if: github.event.inputs.branches != ''
#        id: read-cache
#        run: |
#          branch_info=$(jq -r '.${{ asc_branch_name }}' ${{ env.BRANCH_JSON }})
#          if [ -n "$branch_info" ]; then
#            branch_name=$(echo "$branch_info" | jq -r '.branch_name')
#            echo "branch_name=${branch_name}" >> $GITHUB_OUTPUT
#            echo "find branch_info $branch_info $branch_name"
#          else
#            echo "branch_name=''" >> $GITHUB_OUTPUT
#            echo 'not find branch_info'
#          fi
#          echo "$branch_name"
#
#      - name: Generate temporary branch name
#        id: generate-branch-name
#        if: steps.read-cache.outputs.branch_name == '' && github.event.inputs.branches != ''
#        run: |
#          timestamp=$(date +%s)
#          time=$(date +%Y-%m-%d\ %H:%M:%S)
#          branch_name=tmp/tmp_${timestamp}
#          asc_branch_name=${{ steps.branches-sort.outputs.asc_branch_name }}
#          echo "${branch_name}"
#          BRANCH_INFO="{ \"branch_name\": \"${branch_name}\", \"time\": \"${time}\", \"timestamp\": ${timestamp} }"
#          echo "$BRANCH_INFO"
#          jq --arg key "$asc_branch_name" --argjson new_info "$BRANCH_INFO" '.[ $key ] = $new_info' ${{ env.BRANCH_JSON }} > temp.json && mv temp.json ${{ env.BRANCH_JSON }}
#          echo "new_branch_name=tmp/tmp_${timestamp}" >> "$GITHUB_OUTPUT"
#          git commit -a -m "Tmp Branch $branch_name"
#          git push
#
#      - name: Create temporary branch
#        if: steps.generate-branch-name.outputs.new_branch_name != '' && github.event.inputs.branches != ''
#        run: |
#          git checkout -b ${{ steps.generate-branch-name.outputs.new_branch_name }} origin/${GITHUB_REF#refs/heads/}
#          git push -u origin ${{ steps.generate-branch-name.outputs.new_branch_name }}
#
#      - name: Final branch name
#        if: github.event.inputs.branches != ''
#        id: final-branch-name
#        run: |
#          if [ ${{ steps.read-cache.outputs.branch_name }} == '' ]; then
#            echo "new branchname = ${{ steps.generate-branch-name.outputs.new_branch_name }}"
#            echo "final_branch_name=${{ steps.generate-branch-name.outputs.new_branch_name }}" >> "$GITHUB_OUTPUT"
#          else
#            echo "old branch name = ${{ steps.read-cache.outputs.branch_name }}"
#            echo "final_branch_name=${{ steps.read-cache.outputs.branch_name }}" >> "$GITHUB_OUTPUT"
#          fi


#  merge-branches:
#    needs: [ multiple-branches ]
#    outputs:
#      FINAL_BRANCH_NAME: ${{ needs.multiple-branches.outputs.TMP_BRANCH_NAME }}
#    env:
#      TMP_BRANCH_NAME: ${{ needs.multiple-branches.outputs.TMP_BRANCH_NAME }}
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#
#      - name: Set Git user information
#        if: github.event.inputs.branches != ''
#        run: |
#          git config --global user.email "auto_branch@magicloud.io"
#          git config --global user.name "auto_branch"
#
#      - name: Checkout temporary branch
#        if: github.event.inputs.branches != ''
#        run: |
#          git fetch origin
#          git checkout -b ${{ env.TMP_BRANCH_NAME }} origin/${{ env.TMP_BRANCH_NAME }}
#
#      - name: Merge selected branches
#        if: github.event.inputs.branches != ''
#        id: merge
#        continue-on-error: true
#        run: |
#          git branch
#          branches="${{ github.event.inputs.branches }}"
#          for branch in $branches; do
#            if ! git merge --no-ff origin/$branch; then
#              echo "Merge conflict detected when merging branch origin/$branch "
#              COMMIT_HASH=$(git rev-parse origin/$branch)
#              echo "CONFLICT_BRANCH_HASH=$COMMIT_HASH" >> $GITHUB_ENV
#              exit 1
#            fi
#          done
#
#      - name: Push temporary branch
#        if: github.event.inputs.branches != ''
#        run: |
#          git push -u origin ${{ env.TMP_BRANCH_NAME }}
#
#      - name: Check for merge conflicts
#        if: steps.merge.outcome == 'failure' && github.event.inputs.branches != ''
#        run: |
#          echo "Merge conflicts have occurred. Please manually resolve the conflicts and try again with the follow steps:"
#          echo "git fetch origin; git checkout -b ${{ env.TMP_BRANCH_NAME }} origin/${{ env.TMP_BRANCH_NAME }}"
#          echo "git merge --no-ff ${{env.CONFLICT_BRANCH_HASH}}"
#          echo "You should resolve conflicts and commit then push it."
#          echo "git push origin ${{ env.TMP_BRANCH_NAME }}"
#          exit 1

  build-run:
    needs: merge_branches
    env:
      BRANCH_JSON: './multiple_branch.json'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Git checkout multiple-branch-info
        run: |
          git checkout -b multiple-branch-info origin/multiple-branch-info
          branch=$(jq -r '.current_branch' ${{ env.BRANCH_JSON }})
          echo "TMP_BRANCH=$branch" >> $GITHUB_ENV
          echo "TMP_BRANCH=$branch"

      - name: Read branch
        run: |
          git branch

#      - name: Check Out Target Branch
#        run: |
#          if [ "${{ steps.branch-name.outputs.final_branch_name }}" == '' ]; then
#            git_hash=$(git rev-parse --short HEAD)
#            echo "GIT_SHORT_SHA=$git_hash" >> $GITHUB_ENV
#            echo "GIT_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
#            echo "one branch ${GITHUB_REF#refs/heads/}"
#          else
#            git_hash=$(git rev-parse --short origin/${{ env.steps.branch-merge.outputs. }})
#            echo "GIT_SHORT_SHA=$git_hash" >> $GITHUB_ENV
#            echo "GIT_BRANCH=${{ env.TMP_BRANCH_NAME }}" >> $GITHUB_ENV
#            echo "multiple branch ${{ env.TMP_BRANCH_NAME }}"
#          fi
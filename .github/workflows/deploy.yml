name: run

on:
  workflow_dispatch:
    inputs:
      branches:
        description: 'Branches to merge (separated by space)'
        required: false
        type: string
        default: ""
      environment:
        description: 'Environment (e.g., dev, staging, prod)'
        required: true
        type: string
        default: dev

jobs:
  multiple-branches:
    outputs:
      TMP_BRANCH_NAME: ${{ steps.final-branch-name.outputs.final_branch_name }}
    env:
      BRANCH_JSON: './multiple_branch.json'
      ENV: ${{ github.event.inputs.environment }}
    if: github.event.inputs.branches != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Git user information
        run: |
          git config --global user.email "auto_branch@magicloud.io"
          git config --global user.name "auto_branch"

      - name: Git checkout multiple-branch-info
        run: |
          git checkout -b multiple-branch-info origin/multiple-branch-info
          git branch

      - name: Read data from file
        run: |
          if [ -f "${{ env.BRANCH_JSON }}" ]; then
            echo "multiple_branch.json existã€‚"
            data=$(cat ${{ env.BRANCH_JSON }})
            echo "Previous multiple_branch_data: $data"
          else
            echo "multiple_branch.json not exist, please check it"
          fi

      - name: Branches sort name key
        id: branches-sort
        run: |
          branches="${{ github.event.inputs.branches }}"
          IFS=' ' read -r -a branch_array <<< "$branches"
          sorted_branches=($(printf "%s\n" "${branch_array[@]}" | sort))
          asc_branch_name=$(IFS=_; echo "${sorted_branches[*]}")
          echo "asc_branch_name=${asc_branch_name}" >> $GITHUB_OUTPUT
          echo "${asc_branch_name}"


      - name: Read Cache Branch
        id: read-cache
        run: |
          branch_info=$(jq -r '.${{ steps.branches-sort.outputs.asc_branch_name }}' ${{ env.BRANCH_JSON }})
          if [ -n "$branch_info" ]; then
            branch_name=$(echo "$branch_info" | jq -r '.branch_name')
            echo "branch_name=${branch_name}" >> $GITHUB_OUTPUT
            echo "find branch_info $branch_info $branch_name"
          else
            echo "branch_name=''" >> $GITHUB_OUTPUT
            echo 'not find branch_info'
          fi
          echo "$branch_name"

      - name: Generate temporary branch name
        id: generate-branch-name
        if: steps.read-cache.outputs.branch_name == ''
        run: |
          timestamp=$(date +%s)
          time=$(date +%Y-%m-%d\ %H:%M:%S)
          branch_name=tmp/tmp_${timestamp}
          asc_branch_name=${{ steps.branches-sort.outputs.asc_branch_name }}
          echo "${branch_name}"
          BRANCH_INFO="{ \"branch_name\": \"${branch_name}\", \"time\": \"${time}\", \"timestamp\": ${timestamp} }"
          echo "$BRANCH_INFO"
          jq --arg key "$asc_branch_name" --argjson new_info "$BRANCH_INFO" '.[ $key ] = $new_info' ${{ env.BRANCH_JSON }} > temp.json && mv temp.json ${{ env.BRANCH_JSON }}
          echo "new_branch_name=tmp/tmp_${timestamp}" >> "$GITHUB_OUTPUT"
          git commit -a -m "Tmp Branch $branch_name"
          git push

      - name: Create temporary branch
        if: steps.generate-branch-name.outputs.new_branch_name != ''
        run: |
          git checkout -b ${{ steps.generate-branch-name.outputs.new_branch_name }} origin/${GITHUB_REF#refs/heads/}
          git push -u origin ${{ steps.generate-branch-name.outputs.new_branch_name }}

      - name: Final branch name
        id: final-branch-name
        run: |
          if [ ${{ steps.read-cache.outputs.branch_name }} == '' ]; then
            echo "new branchname = ${{ steps.generate-branch-name.outputs.new_branch_name }}"
            echo "final_branch_name=${{ steps.generate-branch-name.outputs.new_branch_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "old branch name = ${{ steps.read-cache.outputs.branch_name }}"
            echo "final_branch_name=${{ steps.read-cache.outputs.branch_name }}" >> "$GITHUB_OUTPUT"
          fi


  merge-branches:
    needs: [ multiple-branches ]
    env:
      TMP_BRANCH_NAME: ${{ needs.multiple-branches.outputs.TMP_BRANCH_NAME }}
    if: github.event.inputs.branches != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Git user information
        run: |
          git config --global user.email "auto_branch@magicloud.io"
          git config --global user.name "auto_branch"

      - name: Checkout temporary branch
        run: |
          git fetch origin
          git checkout -b ${{ env.TMP_BRANCH_NAME }} origin/${{ env.TMP_BRANCH_NAME }}

      - name: Merge selected branches
        id: merge
        continue-on-error: true
        run: |
          git branch
          branches="${{ github.event.inputs.branches }}"
          for branch in $branches; do
            if ! git merge --no-ff origin/$branch; then
              echo "Merge conflict detected when merging branch origin/$branch "
              COMMIT_HASH=$(git rev-parse origin/$branch)
              echo "CONFLICT_BRANCH_HASH=$COMMIT_HASH" >> $GITHUB_ENV
              exit 1
            fi
          done

      - name: Check status
        run: git status

      - name: Push temporary branch
        run: |
          git push -u origin ${{ env.TMP_BRANCH_NAME }}

      - name: Check for merge conflicts
        if: steps.merge.outcome == 'failure'
        run: |
          echo "Merge conflicts have occurred. Please manually resolve the conflicts and try again with the follow steps:"
          echo "git fetch origin; git checkout -b ${{ env.TMP_BRANCH_NAME }} origin/${{ env.TMP_BRANCH_NAME }}"
          echo "git merge --no-ff ${{env.CONFLICT_BRANCH_HASH}}"
          echo "You should resolve conflicts and commit then push it."
          echo "git push origin ${{ env.TMP_BRANCH_NAME }}"           
          exit 1

  build-run:
    needs: [ multiple-branches ]
    env:
      TMP_BRANCH_NAME: ${{ needs.multiple-branches.outputs.TMP_BRANCH_NAME }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check Out Target Branch
        run: |
          if [ "${{ github.event.inputs.branches }}" == '' ]; then
            git_hash=$(git rev-parse --short HEAD)
            echo "GIT_SHORT_SHA=$git_hash" >> $GITHUB_ENV
            echo "GIT_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
            echo "one branch ${GITHUB_REF#refs/heads/}"
          else
            git_hash=$(git rev-parse --short origin/${{ env.TMP_BRANCH_NAME }})
            echo "GIT_SHORT_SHA=$git_hash" >> $GITHUB_ENV
            echo "GIT_BRANCH=${{ env.TMP_BRANCH_NAME }}" >> $GITHUB_ENV
            echo "multiple branch ${{ env.TMP_BRANCH_NAME }}"
          fi